.app-button {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  font-weight: 600;
  border: none;
  border-radius: 100px; // Make buttons round
  cursor: pointer;
  transition: all 0.2s ease;
  position: relative;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.25);
  width: 100%; // Button will always fill its container

  &:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba(107, 199, 186, 0.4);
  }

  &:active:not(.disabled) {
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
    font-weight: 600; // Ensure font weight remains consistent
    transform: translateY(1px);
  }

  // Common hover effect
  &:hover:not(.disabled) {
    filter: brightness(1.1);
    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.35);
  }
}

// Size classes
.xs {
  padding: 4px 12px;
  font-size: 0.75rem;
  min-height: 28px;
}

.sm {
  padding: 6px 16px;
  font-size: 0.8125rem;
  min-height: 32px;
}

.md {
  padding: 8px 20px;
  font-size: 0.875rem;
  min-height: 36px;
}

.lg {
  padding: 10px 24px;
  font-size: 1rem;
  min-height: 44px;
}

.xlg {
  padding: 12px 32px;
  font-size: 1.125rem;
  min-height: 52px;
}

// Variant classes
.primary {
  background-color: var(--kaspa-20);
  color: var(--vampire-black);
  box-shadow: 0 3px 5px rgba(0, 0, 0, 0.3); // Slightly stronger shadow for primary

  &:active:not(.disabled) {
    background-color: var(--kaspa-30);
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.25);
  }

  &:focus {
    box-shadow: 0 0 0 3px rgba(107, 199, 186, 0.4);
  }

  app-spinner {
    --spinner-color: var(--vampire-black, #000000);
  }
}

.secondary {
  background-color: var(--purple-20);
  color: var(--white);
  box-shadow: 0 3px 5px rgba(0, 0, 0, 0.3); // Medium shadow for secondary

  &:hover:not(.disabled) {
    filter: brightness(1.1);
  }

  &:active:not(.disabled) {
    background-color: var(--purple-30);
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.25);
  }

  &:focus {
    box-shadow: 0 0 0 3px rgba(180, 58, 237, 0.4);
  }

  app-spinner {
    --spinner-color: var(--white, #ffffff);
  }
}

.tertiary {
  background-color: var(--universal-tertiary-color);
  color: var(--white);
  border: 1px solid var(--universal-tertiary-color);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); // Lighter shadow for tertiary

  &:hover:not(.disabled) {
    background-color: var(--universal-tertiary-2); // Using the brighter universal tertiary color
    border-color: var(--universal-tertiary-2);
    color: var(--white);
  }

  &:active:not(.disabled) {
    background-color: var(--universal-tertiary-2); // Same as hover for consistency
    box-shadow: 0 1px 1px rgba(0, 0, 0, 0.15);
    color: var(--white);
  }

  &:focus {
    box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.3);
  }

  app-spinner {
    --spinner-color: var(--white, #ffffff);
  }
}

.gradient_1 {
  background: var(--gradient-1);
  color: var(--vampire-black);
  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.3);
  position: relative;
  z-index: 1;
  background-size: 100% 100%;
  transition: all 0.3s ease;

  // Create a pseudo-element for the hover state to avoid disrupting the gradient
  &::before {
    content: '';
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    background: var(--gradient-1);
    background-size: 200% 100%;
    border-radius: inherit;
    z-index: -1;
    opacity: 0;
    transition: opacity 0.3s ease;
    filter: brightness(1.1);
  }

  &:hover:not(.disabled) {
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.4);
    background-size: 150% 100%;

    &::before {
      opacity: 1;
      animation: gradient-slide 3s linear infinite;
    }
  }

  &:active:not(.disabled) {
    transform: translateY(1px);
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);
  }

  &:focus {
    box-shadow: 0 0 0 3px rgba(180, 58, 237, 0.3);
  }

  &.disabled {
    cursor: not-allowed;
    pointer-events: none;
    opacity: 0.6;
    filter: grayscale(30%);
  }

  app-spinner {
    --spinner-color: var(--vampire-black, #000000);
  }
}

.gradient_2 {
  background: var(--gradient-2);
  color: var(--white);
  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.3);
  position: relative;
  z-index: 1;
  background-size: 200% 100%;
  transition: all 0.3s ease;

  // Create a pseudo-element for the hover state to avoid disrupting the gradient
  &::before {
    content: '';
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    background: var(--gradient-2);
    background-size: 200% 100%;
    border-radius: inherit;
    z-index: -1;
    opacity: 0;
    transition: opacity 0.3s ease;
    filter: brightness(1.1);
  }

  &:hover:not(.disabled) {
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.4);

    &::before {
      opacity: 1;
      animation: gradient-slide-reverse 4s linear infinite;
    }
  }

  &:active:not(.disabled) {
    transform: translateY(1px);
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);
  }

  &:focus {
    box-shadow: 0 0 0 3px rgba(116, 119, 255, 0.4);
  }

  &.disabled {
    cursor: not-allowed;
    pointer-events: none;
    opacity: 0.6;
    filter: grayscale(30%);
  }

  app-spinner {
    --spinner-color: var(--white, #ffffff);
  }
}

@keyframes gradient-slide {
  0% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
}

@keyframes gradient-slide-reverse {
  0% {
    background-position: 100% 50%;
  }
  50% {
    background-position: 0% 50%;
  }
  100% {
    background-position: 100% 50%;
  }
}

// Disabled state
.disabled {
  cursor: not-allowed;
  pointer-events: none;
  box-shadow: none; // Remove shadow for disabled buttons
}

// Full width
.full-width {
  // The host component handles the width
}

// Hidden text when loading
.hidden {
  opacity: 0;
}

// Loading state skeleton effect
.loading {
  position: relative;
  overflow: hidden;

  &::after {
    content: '';
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    background: linear-gradient(90deg,
      rgba(255, 255, 255, 0.15) 0%,
      rgba(255, 255, 255, 0.5) 50%,
      rgba(255, 255, 255, 0.15) 100%
    );
    background-size: 200% 100%;
    animation: skeleton-loading 1.5s infinite;
    pointer-events: none;
  }
}

@keyframes skeleton-loading {
  0% {
    background-position: 200% 0;
  }
  100% {
    background-position: -200% 0;
  }
}

// Role-based styling
.role-success {
  background-color: var(--green-20) !important;
  color: var(--vampire-black) !important;

  &:active:not(.disabled) {
    background-color: var(--green-30) !important;
  }

  &:focus {
    box-shadow: 0 0 0 3px rgba(150, 255, 165, 0.4) !important;
  }

  app-spinner {
    --spinner-color: var(--vampire-black, #000000) !important;
  }
}

.role-info {
  background-color: var(--blue-20) !important;
  color: var(--white) !important;

  &:active:not(.disabled) {
    background-color: var(--blue-30) !important;
  }

  &:focus {
    box-shadow: 0 0 0 3px rgba(116, 119, 255, 0.4) !important;
  }

  app-spinner {
    --spinner-color: var(--white, #ffffff) !important;
  }
}

.role-warning {
  background-color: var(--orange-20) !important;
  color: var(--vampire-black) !important;

  &:active:not(.disabled) {
    background-color: var(--orange-30) !important;
  }

  &:focus {
    box-shadow: 0 0 0 3px rgba(255, 210, 125, 0.4) !important;
  }

  app-spinner {
    --spinner-color: var(--vampire-black, #000000) !important;
  }
}

.role-danger {
  background-color: var(--red-20) !important;
  color: var(--white) !important;

  &:active:not(.disabled) {
    background-color: var(--red-30) !important;
  }

  &:focus {
    box-shadow: 0 0 0 3px rgba(255, 116, 116, 0.4) !important;
  }

  app-spinner {
    --spinner-color: var(--white, #ffffff) !important;
  }
}

.role-neutral {
  background-color: var(--gray-45) !important;
  color: var(--white) !important;

  &:active:not(.disabled) {
    background-color: var(--gray-60) !important;
  }

  &:focus {
    box-shadow: 0 0 0 3px rgba(189, 189, 189, 0.4) !important;
  }

  app-spinner {
    --spinner-color: var(--white, #ffffff) !important;
  }
}

// Layout for spinner + text (center spinner while keeping text's space)
app-spinner {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}
